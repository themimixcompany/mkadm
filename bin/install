#!/usr/bin/env bash

set -euo pipefail

readonly SELF="$(basename ${BASH_SOURCE[0]})"
readonly SELF_DIR="$(cd $(dirname $(readlink -f ${BASH_SOURCE[0]})) > /dev/null 2>&1 && pwd)"
readonly OS="$(uname)"
readonly VERSION="1.0.3"

readonly VAL_SLEEP="15"

VAL_INSTALL_PATH="/var/miki"

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

OPT_DATABASE_INIT=

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "ERROR: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1mERROR: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "WARNING: ${@}" >&2
  else
    echo -e "\e[0;33mWARNING: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
  fi
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options s:i:I: --longoptions help,debug,verbose,sleep:,install-path:,database-init: -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Exiting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (--help) OPT_HELP=true; shift ;;
      (--debug) OPT_DEBUG=true; shift ;;
      (--verbose) OPT_VERBOSE=true; shift ;;
      (-s|--sleep) VAL_SLEEP=$2; shift 2 ;;
      (-i|--install-path) VAL_INSTALL_PATH=$2; shift 2 ;;
      (-I|--database-init) OPT_DATABASE_INIT=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done

  OPT_WORK_DIR="${@: -1}"
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
      --help              Show this help
      --debug             Enable debugging mode
      --verbose           Enable verbose output
  -s, --sleep             Set the sleep time
  -i, --install-path      The path to install Miki on
  -I, --database-init     Initialize the database with a dump
EOF
  exit 0
}

function extract_tarball () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -f "${HOME}/miki.tar.gz" ]]; then
    tar -C /var -xf "${HOME}/miki.tar.gz"
  fi
}

function install_node_js () {
  debug ${FUNCNAME[0]} "$@"

  curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
  apt-get install -y nodejs build-essential software-properties-common
}

function install_postgres () {
  debug ${FUNCNAME[0]} "$@"

  apt-get install -y postgresql postgresql-contrib postgresql-client-common
}

function load_init_sql () {
  debug ${FUNCNAME[0]} "$@"

  sudo -u postgres psql --file="${VAL_INSTALL_PATH}/sql/init.sql"
}

function install_tools () {
  debug ${FUNCNAME[0]} "$@"

  apt-get install -y jq python3-pip
  pip3 install yq
}

function install_miki_service () {
  debug ${FUNCNAME[0]} "$@"

  cp "${SELF_DIR}/miki.service" /etc/systemd/system
}

function initialize_database () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_DATABASE_INIT}" ]]; then
    /usr/local/bin/pgadm -If "${OPT_DATABASE_INIT}" || true
    rm -f "${OPT_DATABASE_INIT}"
  fi
}

function load_post_sql () {
  debug ${FUNCNAME[0]} "$@"

  sleep "${VAL_SLEEP}"

  /usr/local/bin/pgsql --file="${VAL_INSTALL_PATH}/sql/post.sql"
}

function start_miki_service () {
  debug ${FUNCNAME[0]} "$@"

  systemctl daemon-reload
  systemctl start miki.service
}

function stop_miki_service () {
  debug ${FUNCNAME[0]} "$@"

  systemctl stop miki.service
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"

  install_node_js
  install_postgres
  load_init_sql
  install_tools
  install_miki_service
  initialize_database
  start_miki_service
  #load_post_sql
}

main "$@"
