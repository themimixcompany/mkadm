#!/usr/bin/env bash

set -euo pipefail

readonly SELF="$(basename ${BASH_SOURCE[0]})"
readonly SELF_DIR="$(cd $(dirname $(readlink -f ${BASH_SOURCE[0]})) > /dev/null 2>&1 && pwd)"
readonly OS="$(uname)"
readonly VERSION="1.5.1"

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=
OPT_VERSION=

OPT_TYPE=
OPT_NAME=
OPT_EMAIL=
OPT_SUBDOMAIN=
OPT_SUBSCRIPTION_ID=
OPT_CHECK_NAME=

VAL_SCREEN_LOG_FILE=/tmp/mkadm.${RANDOM}.log

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "ERROR: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1mERROR: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "WARNING: ${@}" >&2
  else
    echo -e "\e[0;33mWARNING: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo -n "** "
    echo "\${PWD}: ${PWD}"
    echo "\${@}: ${@}"
  fi
}

function parse_arguments () {
  debug "${FUNCNAME[0]}" "$@"

  local opts=$(getopt -n "${SELF}" --options t:n:e:B:I:C --longoptions help,debug,verbose,version,type:,name:,email:,subdomain:,subscription-id:,check-name -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Aborting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (--help) OPT_HELP=true; shift ;;
      (--debug) OPT_DEBUG=true; shift ;;
      (--verbose) OPT_VERBOSE=true; shift ;;
      (--version) OPT_VERSION=true; shift ;;
      (-t|--type) OPT_TYPE=$2; shift 2 ;;
      (-n|--name) OPT_NAME="${2// /}"; shift 2 ;;
      (-e|--email) OPT_EMAIL=$2; shift 2 ;;
      (-B|--subdomain) OPT_SUBDOMAIN="${2// /}"; shift 2 ;;
      (-I|--subscription-id) OPT_SUBSCRIPTION_ID=$2; shift 2 ;;
      (-C|--check) OPT_CHECK_NAME=true; shift ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}
function process_arguments () {
  debug "${FUNCNAME[0]}" "$@"

  if [[ -n "${OPT_HELP}"  || "${#}" -eq 0 ]]; then
    display_usage
  elif [[ -n "${OPT_CHECK_NAME}" ]]; then
    check_name
  elif [[ -z "${OPT_TYPE}" ]]; then
    display_usage
  elif [[ -n "${OPT_VERSION}" ]]; then
    display_version
  else
    return 0
  fi
}

function display_usage () {
  debug "${FUNCNAME[0]}" "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
      --help                   Show this help
      --debug                  Enable debugging mode
      --verbose                Enable verbose output
      --version                Display program version info
  -t, --type <TYPE>            The type of deployment
  -n, --name <TEXT>            The name of the instance
  -e, --email <EMAIL>          The email address of the admin account
  -B, --subdomain <SUBDOMAIN>  The subdomain to use on the top-level domain
  -I, --subscription-id <ID>   The Chargify subscription ID
  -C, --check-name             Flag to return true if an instance already exits
EOF
  exit 0
}

function display_version () {
  debug "${FUNCNAME[0]}" "$@"

  cat << EOF
${SELF} v${VERSION}
EOF
  exit 0
}

function check_name () {
  debug "${FUNCNAME[0]}" "$@"

  mkadm -n "${OPT_NAME}" -C

  exit $?
}

function delete_log_file () {
  debug "${FUNCNAME[0]}" "$@"

  local logfile="/tmp/mkadm.${OPT_SUBSCRIPTION_ID}.log"

  if [[ -f "${logfile}" ]]; then
    rm -f "${logfile}"
  else
    return 0
  fi
}

function create_screen () {
  debug "${FUNCNAME[0]}" "$@"

  local logfile="/tmp/mkadm.${OPT_SUBSCRIPTION_ID}.log"
  local screen_name="deploy.${OPT_SUBSCRIPTION_ID}"

  screen -L -Logfile "${logfile}" -dmS "${screen_name}" "$@"
}

function run () {
  debug "${FUNCNAME[0]}" "$@"

  case "${OPT_TYPE}" in
    (hosted-miki|hosted)
      create_screen mkadm -U -n "${OPT_NAME}" -e "${OPT_EMAIL}" \
                    -B "${OPT_SUBDOMAIN}" -I "${OPT_SUBSCRIPTION_ID}"
      ;;
    (desktop-miki-windows|windows)
      create_screen mkadm -n "${OPT_NAME}" -e "${OPT_EMAIL}" \
                    -B "${OPT_SUBDOMAIN}" -I "${OPT_SUBSCRIPTION_ID}" \
                    -D windows
      ;;
    (desktop-miki-macos|macos)
      create_screen mkadm -n "${OPT_NAME}" -e "${OPT_EMAIL}" \
                    -B "${OPT_SUBDOMAIN}" -I "${OPT_SUBSCRIPTION_ID}" \
                    -D macos
      ;;
    (*)
      error "Deployment type ${OPT_TYPE} not found. Aborting."
      ;;
  esac
}

function main () {
  debug "${FUNCNAME[0]}" "$@"

  parse_arguments "$@"
  process_arguments "$@"

  delete_log_file
  run
}

main "$@"
