#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly OS=$(uname)
readonly VERSION=1.0.3

readonly OPT_BASE_NAME=${SELF}

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
  fi
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options hdv --longoptions help,debug,verbose -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Exiting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} [OPTIONS]... <DROPLET>

OPTIONS:
  -h, --help       Show this help
  -d, --debug      Enable debugging mode
  -v, --verbose    Enable verbose output
EOF
  exit 0
}

declare -A SUBSTITUTIONS=(
    ['wiki\.js\.org']="miki.mimix.io"
    ['Wiki\.js']="Miki"
    ['WIKI\.js']="Miki"
    ['wiki\.js']="miki"
    ['wiki-js']="miki"
    ['wikijs']="miki"
    ['github\.com/Requarks/wiki']="github.com/themimixcompany/miki"
    ['requarks\.io']="mimix.io"
    ['requarks']="mimix"
    ['Requarks']="Mimix"
)

function initialize () {
  debug ${FUNCNAME[0]} "$@"

  cd "$1"

  if [[ -e "package.json" && "$(jq '.name' package.json)" == "wiki" ]]; then
    return 0
  else
    error "!"
  fi
}

function update_files () {
  debug ${FUNCNAME[0]} "$@"

  for i in "${!SUBSTITUTIONS[@]}"; do
    for file in $(rg -l "$i"); do
      sed -i -e "s|${i}|${SUBSTITUTIONS[$i]}|g" "$file"
    done
  done
}

function delete_files () {
  debug ${FUNCNAME[0]} "$@"

  rm -f README.md SECURITY.md
  rm -rf .github
}

function create_readme () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF > README.md
# miki
EOF
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"

  initialize "$@"
  update_files
  delete_files
  create_readme
}

main "$@"
