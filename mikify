#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly SELF_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
readonly OS=$(uname)
readonly VERSION=1.0.11

readonly OPT_BASE_NAME=${SELF}

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

OPT_RESOURCES_DIR=${SELF_DIR}/resources
OPT_ASSETS_DIR=${OPT_RESOURCES_DIR}/assets

OPT_WIKI_NAME=
OPT_WIKI_DOMAIN=
OPT_WIKI_RESOURCES=
OPT_COMPANY_NAME=
OPT_COMPANY_DOMAIN=

OPT_DEFAULT_PACKAGE_VERSION=1.0.0
OPT_PACKAGE_VERSION=

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
  fi
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options hdvN:D:R:C:O:P: --longoptions help,debug,verbose,wiki-name:,wiki-domain:,wiki-resources:,company-name:,company-domain:,package-version: -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Exiting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (-N|--wiki-name) OPT_WIKI_NAME=$2; shift 2 ;;
      (-D|--wiki-domain) OPT_WIKI_DOMAIN=$2; shift 2 ;;
      (-R|--wiki-resources) OPT_WIKI_RESOURCES=$2; shift 2 ;;
      (-C|--company-name) OPT_COMPANY_NAME=$2; shift 2 ;;
      (-O|--company-domain) OPT_COMPANY_DOMAIN=$2; shift 2 ;;
      (-P|--package-version) OPT_PACKAGE_VERSION=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  elif [[ -z "${OPT_WIKI_NAME}" || -z "${OPT_WIKI_DOMAIN}" || -z "${OPT_WIKI_RESOURCES}" || -z "${OPT_COMPANY_NAME}" || -z "${OPT_COMPANY_DOMAIN}" ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
  -h, --help            Show this help
  -d, --debug           Enable debugging mode
  -v, --verbose         Enable verbose output
  -N, --wiki-name       Set wiki name
  -D, --wiki-domain     Set wiki domain
  -R, --wiki-resources  Set URL of wiki resources
  -C, --company-name    Set company name
  -O, --company-domain  Set company domain
  -P, --package-version Set version in package.json
EOF
  exit 0
}

function initialize () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -e "package.json" && "$(jq '.name' package.json)" == \"wiki\" ]]; then
    return 0
  else
    error "!"
  fi
}

function delete_files () {
  debug ${FUNCNAME[0]} "$@"

  rm -f README.md SECURITY.md
  rm -rf .github

  rm -f assets/favicon.ico
  rm -rf assets/favicons
  rm -f assets/svg/logo-wikijs.svg
  rm -f assets/svg/logo-wikijs-full.svg

  rm -f assets/js/admin.js

  rm -rf assets/img/splash
}

function create_readme () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF > README.md
# miki
EOF
}

function find_id () {
  debug ${FUNCNAME[0]} "$@"

  local path=$1
  local regex=$2

  find ${path} -name "${regex}" | awk -F \. '{print $2}'
}

function install_assets () {
  debug ${FUNCNAME[0]} "$@"

  local admin_css_id=$(find_id assets/css "admin.*css")
  rm -f assets/css/admin.*css
  cp ${OPT_ASSETS_DIR}/css/admin.css assets/css/admin.${admin_css_id}.css

  rsync -a ${OPT_ASSETS_DIR}/favicon.ico assets
  rsync -a ${OPT_ASSETS_DIR}/favicons assets
  rsync -a ${OPT_ASSETS_DIR}/svg assets
  rsync -a ${OPT_ASSETS_DIR}/js assets

  rsync -a ${OPT_ASSETS_DIR}/img/splash assets/img
}

function install_resources () {
  debug ${FUNCNAME[0]} "$@"

  install_assets
}

function update_files () {
  debug ${FUNCNAME[0]} "$@"

  declare -A SUBSTITUTIONS=(
    ['wikijs-butterfly.svg']="${OPT_COMPANY_NAME}.svg"

    ['wiki\.js']="${OPT_WIKI_NAME}"
    ['wiki-js']="${OPT_WIKI_NAME}"
    ['wikijs']="${OPT_WIKI_NAME}"
    ['Wiki\.js']="${OPT_WIKI_NAME^}"
    ['WIKI\.js']="${OPT_WIKI_NAME^}"

    ['wiki\.js\.org']="${OPT_WIKI_DOMAIN}"
    ['wiki\.yourdomain\.com']="${OPT_WIKI_DOMAIN}"

    ['https://static\.requarks\.io/logo']="${OPT_WIKI_RESOURCES}"

    ['https://github\.com/Requarks/wiki']="https://github.com/themimixcompany/miki"

    #['requarks\.io']="${OPT_COMPANY_DOMAIN}"
    #['requarks']="${OPT_COMPANY_NAME}"
    #['Requarks']="${OPT_COMPANY_NAME^}"
  )

  for i in "${!SUBSTITUTIONS[@]}"; do
    for file in $(rg -l "$i"); do
      sed -i -e "s|${i}|${SUBSTITUTIONS[$i]}|g" "$file"
    done
  done
}

function update_package_json () {
  debug ${FUNCNAME[0]} "$@"

  local temp=$(mktemp)
  local version=${OPT_PACKAGE_VERSION:-${OPT_DEFAULT_PACKAGE_VERSION}}

  jq -r ".version = \"${version}\"" package.json > ${temp}
  mv -f ${temp} package.json
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"

  initialize "$@"

  delete_files
  create_readme

  install_resources
  update_files
  update_package_json
}

main "$@"
