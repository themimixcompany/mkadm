#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF="$(basename ${BASH_SOURCE[0]})"
readonly SELF_DIR="$(cd $(dirname $(readlink -f ${BASH_SOURCE[0]})) > /dev/null 2>&1 && pwd)"
readonly OS=$(uname)
readonly VERSION=1.3.2

readonly OPT_BASE_NAME=${SELF}

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

OPT_SLEEP=15
OPT_RESOURCES_DIR=${SELF_DIR}/resources
OPT_DEFAULT_DOMAIN=streamsharing.io

OPT_NAME=
OPT_DOMAIN=
OPT_DROPLET=
OPT_FIREWALL=
OPT_RANDOM=$(od -t uI -N 4 /dev/urandom | awk '{print $2}' | sed 2d)

OPT_MIKI_DIRECTORY=$HOME/miki/miki

OPT_WIKI_DOMAIN=
OPT_WIKI_NAME=miki

OPT_WIKI_RESOURCES=/_assets/svg

OPT_COMPANY_NAME=miki
OPT_COMPANY_DOMAIN=mimix.io

OPT_DEFAULT_PACKAGE_VERSION="1.0.0"
OPT_PACKAGE_VERSION=

OPT_BASE_COMMIT="2.5.159"

OPT_ENABLE_WIKI_SSL=false
OPT_ENABLE_DB_SSL=false
OPT_PASSWORD_FILE=

OPT_CREATE_TARBALL=
OPT_PGADM=
OPT_INSTALL_LOCATION=/var/miki
OPT_INSTALL_REMOTELY=

OPT_SSH_KEYS=
OPT_REMOVE_SELF_SSH_KEY=

OPT_DROPLET_USER=root
OPT_DROPLET_NAME=
OPT_DROPLET_ADDRESS=

OPT_DATABASE_NAME=defaultdb
OPT_DATABASE_USER=doadmin
OPT_DATABASE_INIT=

OPT_FIREWALL_NAME=
OPT_FIREWALL_ADDRESSES=
OPT_FIREWALL_PORTS="22,80,443"
OPT_CREATE_FIREWALL=

OPT_YAML_FILTER=
OPT_ADDRESS=
OPT_HOST=
OPT_SHORT_HOST=
OPT_ENABLE_SSL=
OPT_DISABLE_SSL=
OPT_DOMAIN_NAME=
OPT_COMMAND=

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo -n "** "
    echo "\\${PWD}: ${PWD}"
    echo "\\${@}: ${@}"
  fi
}

function push () {
  debug ${FUNCNAME[0]} "$@"

  pushd "${1}" &> /dev/null
}

function pop () {
  debug ${FUNCNAME[0]} "$@"

  popd &> /dev/null
}

function run_ssh () {
  debug ${FUNCNAME[0]} "$@"

  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR "$@"
}

function run_scp () {
  debug ${FUNCNAME[0]} "$@"

  scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=ERROR "$@"
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options vn:m:w:d:r:C:O:V:eEtp:l:iKk:D:B:U:I:F:A:P:fy:a:H:h:sSN:c: --longoptions help,debug,verbose,name:,miki-directory:,wiki-name:,wiki-domain:,wiki-resources:,company-name:,company-domain:,package-version:,enable-wiki-ssl,enable-db-ssl,create-tarball,pgadm:,install-location:,install-remotely,remove-self-ssh-key,ssh-key:,droplet-name:,database-name:,database-user:,database-init:,firewall-name:,firewall-addresses:,firewall-ports:,create-firewall,yaml-filter:,address:,host:,short-host:,enable-ssl,disable-ssl,domain-name:,command:x -- "$@")

  if [[ $? != 0 ]]; then
    error "Failed to parse arguments. Exiting."
  fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      (--help) OPT_HELP=true; shift ;;
      (--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;

      (-n|--name) OPT_NAME=$2; shift 2 ;;

      (-m|--miki-directory) OPT_MIKI_DIRECTORY=$2; shift 2 ;;
      (-w|--wiki-name) OPT_WIKI_NAME=$2; shift 2 ;;
      (-d|--wiki-domain) OPT_WIKI_DOMAIN=$2; shift 2 ;;
      (-r|--wiki-resources) OPT_WIKI_RESOURCES=$2; shift 2 ;;
      (-C|--company-name) OPT_COMPANY_NAME=$2; shift 2 ;;
      (-O|--company-domain) OPT_COMPANY_DOMAIN=$2; shift 2 ;;
      (-V|--package-version) OPT_PACKAGE_VERSION=$2; shift 2 ;;

      (-e|--enable-wiki-ssl) OPT_ENABLE_WIKI_SSL=true; shift ;;
      (-E|--enable-db-ssl) OPT_ENABLE_DB_SSL=true; shift ;;

      (-t|--create-tarball) OPT_CREATE_TARBALL=true; shift ;;
      (-p|--pgadm) OPT_PGADM=$2; shift 2 ;;

      (-l|--install-location) OPT_MAKE_TARBALL=true; OPT_INSTALL_LOCATION=$2; shift 2 ;;
      (-i|--install-remotely) OPT_MAKE_TARBALL=true; OPT_INSTALL_REMOTELY=true; shift ;;

      (-K|--remove-self-ssh-key) OPT_REMOVE_SELF_SSH_KEY=true; shift ;;
      (-k|--ssh-key) OPT_SSH_KEYS=$2; shift 2 ;;

      (-D|--droplet-name) OPT_DROPLET_NAME=$2; shift 2 ;;

      (-B|--database-name) OPT_DATABASE_NAME=$2; shift 2 ;;
      (-U|--database-user) OPT_DATABASE_USER=$2; shift 2 ;;
      (-I|--database-init) OPT_DATABASE_INIT=$2; OPT_PGADM=$(which pgadm) ; shift 2 ;;

      (-F|--firewall-name) OPT_FIREWALL_NAME=$2; shift 2 ;;
      (-A|--firewall-addresses) OPT_FIREWALL_ADDRESSES=$2; shift 2 ;;
      (-P|--firewall-ports) OPT_FIREWALL_PORTS=$2; shift 2 ;;
      (-f|--create-firewall) OPT_CREATE_FIREWALL=true; shift ;;

      (-y|--yaml-filter) OPT_YAML_FILTER=$2; shift 2 ;;
      (-a|--address) OPT_ADDRESS=$2; shift 2 ;;
      (-H|--host) OPT_HOST=$2; shift 2 ;;
      (-h|--short-host) OPT_SHORT_HOST=$2; shift 2 ;;
      (-s|--enable-ssl) OPT_ENABLE_SSL=true; shift ;;
      (-S|--disable-ssl) OPT_DISABLE_SSL=true; shift ;;
      (-N|--domain-name) OPT_DOMAIN_NAME=$2; shift 2 ;;

      (-c|--command) OPT_COMMAND=$2; shift 2 ;;

      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  elif [[ -n "${OPT_HOST}" && -n "${OPT_COMMAND}" ]]; then
    send_command
    exit 0
  elif [[ -n "${OPT_SHORT_HOST}" && -n "${OPT_COMMAND}" ]]; then
    OPT_HOST="miki-${OPT_SHORT_HOST}-www"
    send_command
    exit 0
  elif [[ -n "${OPT_HOST}" && -z "${OPT_COMMAND}" ]]; then
    send_filter
    exit 0
  elif [[ -n "${OPT_SHORT_HOST}" && -z "${OPT_COMMAND}" ]]; then
    OPT_HOST="miki-${OPT_SHORT_HOST}-www"
    send_filter
    exit 0
  elif [[ ! "$(basename ${OPT_MIKI_DIRECTORY})" == "miki" ]]; then
    display_usage
  elif [[ -z "${OPT_WIKI_NAME}" || -z "${OPT_WIKI_RESOURCES}" || -z "${OPT_COMPANY_NAME}" || -z "${OPT_COMPANY_DOMAIN}" ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} v${VERSION} [OPTIONS]...

OPTIONS:
  -h, --help                 Show this help
  -d, --debug                Enable debugging mode
  -v, --verbose              Enable verbose output
  -n, --name                 Set the base name of the instance
  -w, --wiki-name            Set wiki name
  -d, --wiki-domain          Set wiki domain
  -r, --wiki-resources       Set location of wiki resources
  -c, --company-name         Set company name
  -o, --company-domain       Set company domain
  -V, --package-version      Set version in package.json
  -e, --enable-wiki-ssl      Enable wiki SSL (default: ${OPT_ENABLE_WIKI_SSL})
  -E, --enable-db-ssl        Enable database SSL (default: ${OPT_ENABLE_DB_SSL})
  -t, --create-tarball       Create a tarball of the input
  -p, --pgadm                Specify the pgadmn program to upload
  -i, --install-directory    Set the installation directory of Miki
  -K, --remove-self-ssh-key  Remove the SSH key of the host from the allowed droplet SSH keys
  -k, --ssh-key              Set the allowed SSH key for the droplet
  -D, --droplet-name         Set the name of droplet to create
  -B, --database-name        Set the name of the database
  -U, --database-user        Set the name of the database user
  -I, --database-init        Initialize the database with a dump
  -F, --firewall-name        Set the name of firewall for this droplet
  -A, --firewall-addresses   A comma-separated list of IP addresses to allow on the droplet
  -P, --firewall-ports       A comma-separated list of allowed ports on the droplet
  -f, --create-firewall      Create a firewall based from the instance name
  -y, --yaml-filter          Send a YAML filter to an address
  -a, --address              The IP address to send the YAML filter to
  -H, --host                 Specify the name of the remote host to send commands to
  -h, --short-host           Specify the short name of the remote host to send commands to
  -s, --enable-ssl           Enable SSL on the remote instance
  -S, --disable-ssl          Disable SSL on the remote instance
  -N, --domain-name          Set the domain name of the remote instance
EOF
  exit 0
}

function set_domain_name () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_WIKI_DOMAIN}" ]]; then
    OPT_DOMAIN="${OPT_WIKI_DOMAIN}"
  elif [[ -n "${OPT_NAME}" ]]; then
    OPT_DOMAIN="${OPT_NAME}.${OPT_DEFAULT_DOMAIN}"
  else
    OPT_DOMAIN="miki.mimix.io"
  fi
}

function set_droplet_name () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_DROPLET_NAME}" ]]; then
    OPT_DROPLET="${OPT_DROPLET_NAME}"
  elif [[ -n "${OPT_NAME}" ]]; then
    OPT_DROPLET="miki-${OPT_NAME}-www"
  else
    OPT_DROPLET=
  fi
}

function set_firewall_name () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_FIREWALL_NAME}" ]]; then
    OPT_FIREWALL="${OPT_FIREWALL_NAME}"
  elif [[ -n "${OPT_NAME}" && -n "${OPT_CREATE_FIREWALL}" ]]; then
    OPT_FIREWALL="miki-${OPT_NAME}-fw"
  else
    OPT_FIREWALL=
  fi
}

function set_names () {
  debug ${FUNCNAME[0]} "$@"

  set_domain_name
  set_droplet_name
  set_firewall_name
}

function initialize () {
  debug ${FUNCNAME[0]} "$@"

  push "${OPT_MIKI_DIRECTORY}"

  if [[ -f "package.json" && "$(jq -r '.name' package.json)" == "wiki" ]]; then
    return 0
  else
    error "!"
  fi
}

function reset_repository () {
  debug ${FUNCNAME[0]} "$@"

  git reset --hard "${OPT_BASE_COMMIT}" &> /dev/null
}

function delete_files () {
  debug ${FUNCNAME[0]} "$@"

  rm -f README.md SECURITY.md
  rm -rf .github

  rm -f assets/favicon.ico
  rm -rf assets/favicons
  rm -f assets/svg/logo-wikijs.svg
  rm -f assets/svg/logo-wikijs-full.svg

  rm -f assets/js/admin.js

  rm -rf assets/img/splash

  rm -rf db
  rm -rf data
}

function create_readme () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF > README.md
# miki
EOF
}

function create_local_config_yml () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF > config.yml
port: 3000

db:
  type: sqlite
  storage: db/db.sqlite

ssl:
  enabled: false

bindIP: 0.0.0.0

logLevel: info

offline: false

ha: false

dataPath: ./data
EOF
}

function find_id () {
  debug ${FUNCNAME[0]} "$@"

  local path=$1
  local regex=$2

  find ${path} -name "${regex}" | awk -F \. '{print $2}'
}

function copy_vue_files () {
  debug ${FUNCNAME[0]} "$@"

  rsync -a "${OPT_RESOURCES_DIR}/client" .
}

function update_files () {
  debug ${FUNCNAME[0]} "$@"

  declare -A SUBSTITUTIONS=(
    ['wikijs-butterfly.svg']="${OPT_COMPANY_NAME}.svg"

    ['wiki\.js']="${OPT_WIKI_NAME,,}"
    ['wiki-js']="${OPT_WIKI_NAME,,}"
    ['wikijs']="${OPT_WIKI_NAME,,}"
    ['Wiki\.js']="${OPT_WIKI_NAME^}"
    ['WIKI\.js']="${OPT_WIKI_NAME^}"

    ['wiki\.js\.org']="${OPT_DOMAIN}"
    ['wiki\.yourdomain\.com']="${OPT_DOMAIN}"

    ['https://static\.requarks\.io/logo']="${OPT_WIKI_RESOURCES}"

    ['https://github\.com/Requarks/wiki']="https://github.com/themimixcompany/miki"

    #['requarks\.io']="${OPT_COMPANY_DOMAIN}"
    #['requarks']="${OPT_COMPANY_NAME}"
    #['Requarks']="${OPT_COMPANY_NAME^}"
  )

  for i in "${!SUBSTITUTIONS[@]}"; do
    for file in $(rg -l "$i"); do
      sed -i -e "s|${i}|${SUBSTITUTIONS[$i]}|g" "$file"
    done
  done
}

function update_package_json () {
  debug ${FUNCNAME[0]} "$@"

  local temp=$(mktemp)
  local version=${OPT_PACKAGE_VERSION:-${OPT_DEFAULT_PACKAGE_VERSION}}

  cat package.json | jq ".version = \"${version}\""  | jq '.dev = false' > "${temp}"
  mv -f ${temp} package.json
}

function yarn_build () {
  debug ${FUNCNAME[0]} "$@"

  echo "================================================================================"
  echo " Compiling sources ..."
  echo "================================================================================"

  yarn build
}

function install_assets () {
  debug ${FUNCNAME[0]} "$@"

  rsync -a ${OPT_RESOURCES_DIR}/assets/favicon.ico assets
  rsync -a ${OPT_RESOURCES_DIR}/assets/favicons assets
  rsync -a ${OPT_RESOURCES_DIR}/assets/svg assets
  rsync -a ${OPT_RESOURCES_DIR}/assets/img/splash assets/img
}

function create_db_directory () {
  debug ${FUNCNAME[0]} "$@"

  mkdir -p db
}

function create_password () {
  debug ${FUNCNAME[0]} "$@"

  < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c ${1:-32}
}

function create_password_file () {
  debug ${FUNCNAME[0]} "$@"

  OPT_PASSWORD_FILE=$(mktemp)

  echo $(create_password) > "${OPT_PASSWORD_FILE}"
}

function create_remote_config_yml () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF > config.yml
#port: 3000

db:
  type: postgres
  host: localhost
  port: 5432
  user: ${OPT_DATABASE_USER}
  pass: $(cat ${OPT_PASSWORD_FILE})
  db: ${OPT_DATABASE_NAME}
  ssl: ${OPT_ENABLE_DB_SSL}
  sslOptions:
    auto: true
    ca: ./keys/ca.crt
    cert: ./keys/cert.pem
    key: ./keys/key.pem

ssl:
  enabled: ${OPT_ENABLE_WIKI_SSL}
  port: 443
  provider: letsencrypt
  domain: ${OPT_DOMAIN}
  subscriberEmail: david@mimix.io

bindIP: 0.0.0.0

logLevel: info

offline: false

ha: false

dataPath: ./data
EOF
}

function delete_password_file () {
  debug ${FUNCNAME[0]} "$@"

  rm -f "${OPT_PASSWORD_FILE}"
}

function create_init_sql () {
  debug ${FUNCNAME[0]} "$@"

  mkdir -p sql
  cat << EOF > sql/init.sql
CREATE database ${OPT_DATABASE_NAME};
CREATE user ${OPT_DATABASE_USER} password '$(cat ${OPT_PASSWORD_FILE})';
GRANT ALL PRIVILEGES ON DATABASE ${OPT_DATABASE_NAME} TO ${OPT_DATABASE_USER};
EOF
}

function copy_bin () {
  debug ${FUNCNAME[0]} "$@"

  rm -rf bin
  rsync -aL "${SELF_DIR}/bin" .
}

function create_tarball () {
  debug ${FUNCNAME[0]} "$@"

  local file=$(basename ${OPT_MIKI_DIRECTORY}).tar.gz

  pop

  if [[ -n "${OPT_CREATE_TARBALL}" || -n "${OPT_DROPLET}" ]]; then
    tar -C "$(dirname ${OPT_MIKI_DIRECTORY})" \
        -czf "${file}" --exclude ".git" \
        "$(basename ${OPT_MIKI_DIRECTORY})"
  fi
}

function self_ssh_key () {
  debug ${FUNCNAME[0]} "$@"

  local key_file=

  if [[ -n "$HOME/.ssh/id_ed25519" ]]; then
    key_file="$HOME/.ssh/id_ed25519"
  elif [[ -n "$HOME/.ssh/id_rsa" ]]; then
    key_file="$HOME/.ssh/id_rsa"
  fi

  if [[ -n "${key_file}" ]]; then
    ssh-keygen -l -E md5 -f "${key_file}" | awk '{print $2}' | sed 's/^...://'
  fi
}

function set_keys () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -z "${OPT_REMOVE_SELF_SSH_KEY}" ]]; then
    if [[ -n "${OPT_SSH_KEYS}" ]]; then
      OPT_SSH_KEYS="${OPT_SSH_KEYS},$(self_ssh_key)"
    else
      OPT_SSH_KEYS="$(self_ssh_key)"
    fi
  else
    OPT_SSH_KEYS="${OPT_SSH_KEYS}"
  fi
}

function create_droplet () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_INSTALL_LOCATION}" && -n "${OPT_DROPLET}" ]]; then
    OPT_DROPLET_ADDRESS=$(doadm -DCN "${OPT_DROPLET}" -K "${OPT_SSH_KEYS}" )
    echo "${OPT_DROPLET_ADDRESS}"
  fi
}

function droplet_ok () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_DROPLET}" && -n "${OPT_DROPLET_ADDRESS}" ]]; then
    return 0
  else
    return 1
  fi
}

function upload_tarball () {
  debug ${FUNCNAME[0]} "$@"

  local file="$(basename ${OPT_MIKI_DIRECTORY}).tar.gz"

  sleep "${OPT_SLEEP}"

  if [[ -f "${file}" && -n "${OPT_INSTALL_LOCATION}" && -n "${OPT_DROPLET_USER}" ]] && droplet_ok; then
    run_scp "${file}" "${OPT_DROPLET_USER}@${OPT_DROPLET_ADDRESS}:"
  fi
}

function delete_tarball () {
  debug ${FUNCNAME[0]} "$@"

  local directory="$(dirname ${OPT_MIKI_DIRECTORY})"
  local file="$(basename ${OPT_MIKI_DIRECTORY}).tar.gz"
}

function upload_database_init () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_DATABASE_INIT}" ]]; then
    run_scp "${OPT_DATABASE_INIT}" "${OPT_DROPLET_USER}@${OPT_DROPLET_ADDRESS}:/tmp"
  fi
}

function upload_pgadm () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_INSTALL_LOCATION}" && -n "${OPT_DATABASE_INIT}" ]] && droplet_ok; then
    run_scp "${OPT_PGADM}" "${OPT_DROPLET_USER}@${OPT_DROPLET_ADDRESS}:/usr/local/bin"
  fi
}

function install_miki () {
  debug ${FUNCNAME[0]} "$@"

  local file="$(basename ${OPT_MIKI_DIRECTORY}).tar.gz"
  local base_cmd="tar -C /var -xf ${file}; bash ${OPT_INSTALL_LOCATION}/bin/install -i ${OPT_INSTALL_LOCATION}"
  local cmd=

  if [[ -n "${OPT_INSTALL_LOCATION}" ]] && droplet_ok && [[ -n "${OPT_DATABASE_INIT}" ]]; then
    cmd="${base_cmd} -I /tmp/$(basename ${OPT_DATABASE_INIT})"
  else
    cmd="${base_cmd}"
  fi

  if [[ -n "${OPT_INSTALL_LOCATION}" ]] && droplet_ok; then
    run_ssh "${OPT_DROPLET_USER}@${OPT_DROPLET_ADDRESS}" "${cmd}"
  fi

  return 0
}

function create_firewall () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_FIREWALL}" ]]; then
    doadm -FCN "${OPT_FIREWALL}" -a "${OPT_DROPLET}" \
          -A "${OPT_FIREWALL_ADDRESSES}" -P "${OPT_FIREWALL_PORTS}"
  fi
}

function display_address () {
  debug ${FUNCNAME[0]} "$@"

  echo -e "\n"
  echo "================================================================================"
  echo " Your new Miki instance is now available at http://${OPT_DROPLET_ADDRESS}."
  echo "================================================================================"
}

function local_install () {
  debug ${FUNCNAME[0]} "$@"

  initialize
  set_names
  reset_repository
  delete_files
  create_readme
  create_local_config_yml

  copy_vue_files
  update_files
  update_package_json
  yarn_build

  install_assets
  create_db_directory

  create_tarball
}

function remote_install () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_INSTALL_REMOTELY}" && -n "${OPT_INSTALL_LOCATION}" && \
          -n "${OPT_DATABASE_NAME}" && -n "${OPT_DATABASE_USER}" ]]; then
    push "${OPT_MIKI_DIRECTORY}"

    create_password_file
    create_remote_config_yml
    create_init_sql
    delete_password_file

    copy_bin
    create_tarball
    set_keys
    create_droplet
    upload_tarball
    delete_tarball

    upload_database_init
    upload_pgadm
    install_miki
    create_firewall
    display_address
  fi
}

function get_droplet_address () {
  debug ${FUNCNAME[0]} "$@"

  doadm -DL | awk "/[0-9]+\s+${1}/" | awk '{print $3}'
}

function send_yaml_filter () {
  debug ${FUNCNAME[0]} "$@"

  local filter="${1:-${OPT_YAML_FILTER}}"

  if [[ -n "${filter}" && -n "${OPT_HOST}" ]]; then
    for address in $(get_droplet_address "${OPT_HOST}"); do
      run_ssh "${OPT_DROPLET_USER}@${address}" \
              "yq -iy \"${filter}\" /var/miki/config.yml; systemctl restart miki.service"
    done
  fi
}

function enable_ssl () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_ENABLE_SSL}" && -n "${OPT_HOST}" ]]; then
    send_yaml_filter ".ssl.enabled = true"
  fi
}

function disable_ssl () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_DISABLE_SSL}" && -n "${OPT_HOST}" ]]; then
    send_yaml_filter ".ssl.enabled = false"
  fi
}

function set_domain_name () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_DOMAIN_NAME}" && -n "${OPT_HOST}" ]]; then
    send_yaml_filter ".ssl.domain = \\\"${OPT_DOMAIN_NAME}\\\""
  fi
}

function send_filter () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HOST}" ]]; then
    [[ -n "${OPT_ENABLE_SSL}" ]] && enable_ssl
    [[ -n "${OPT_DISABLE_SSL}" ]] && disable_ssl
    [[ -n "${OPT_DOMAIN_NAME}" ]] && set_domain_name
    [[ -n "${OPT_YAML_FILTER}" ]] && send_yaml_filter
  fi
}

function send_command () {
  debug ${FUNCNAME[0]} "$@"

  for address in $(get_droplet_address "${OPT_HOST}"); do
    run_ssh "${OPT_DROPLET_USER}@${address}" "${OPT_COMMAND}"
  done
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"

  local_install
  remote_install
}

main "$@"
